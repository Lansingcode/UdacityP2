knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(GGally)
library(scales)
#library(memisc)
# Load the Data
winedata=read.csv('wineQualityReds.csv')
# winedata=read.csv('wineQualityWhites.csv')
library(ggplot2)
winedata$quality_factor=factor(winedata$quality)
winedata$acidity=with(data=winedata,fixed.acidity+volatile.acidity+citric.acid)
qplot(data=winedata,x=quality)
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)
qplot(data=winedata,x=fixed.acidity,binwidth=0.1)
qplot(data=winedata,x=fixed.acidity,binwidth=0.2)
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(GGally)
library(scales)
#library(memisc)
# Load the Data
winedata=read.csv('wineQualityReds.csv')
# winedata=read.csv('wineQualityWhites.csv')
library(ggplot2)
winedata$quality_factor=factor(winedata$quality)
winedata$acidity=with(data=winedata,fixed.acidity+volatile.acidity+citric.acid)
qplot(data=winedata,x=quality)
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)
# 易挥发性酸
qplot(data=winedata,x=volatile.acidity,binwidth=0.04)+
facet_wrap(~quality)
# 柠檬酸
qplot(data=winedata,x=citric.acid,binwidth=0.04)+
facet_wrap(~quality)
# 剩余糖分
qplot(data=winedata,x=residual.sugar,binwidth=0.2)+
facet_wrap(~quality)
# 氯化物
qplot(data=winedata,x=chlorides,binwidth=0.02)+
scale_x_log10()+
facet_wrap(~quality)
# 单体硫
qplot(data=winedata,x=free.sulfur.dioxide,binwidth=2)+
facet_wrap(~quality)
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=5)+
xlim(0,165)+
facet_wrap(~quality)
# 密度
qplot(data=winedata,x=density,binwidth=0.0005)+
facet_wrap(~quality)
# pH值
qplot(data=winedata,x=pH,binwidth=0.05)+
facet_wrap(~quality)
# 硫酸盐
qplot(data=winedata,x=sulphates,binwidth=0.02)+
xlim(0.3,1.5)+
facet_wrap(~quality)
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.2)+
facet_wrap(~quality)
# 酸总量
qplot(data=winedata,x=acidity,binwidth=0.5)+
facet_wrap(~quality)
quality_boxplot<-function(x,y,method='boxplot'){
if(method=='boxplot'){
qplot(x,y,geom=method)
}
}
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=fixed.acidity),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('非挥发性酸 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.2)
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.3)
# 易挥发性酸
qplot(data=winedata,x=volatile.acidity,binwidth=0.04)
# 易挥发性酸
qplot(data=winedata,x=volatile.acidity,binwidth=0.02)
# 易挥发性酸
qplot(data=winedata,x=volatile.acidity,binwidth=0.03)
# 柠檬酸
qplot(data=winedata,x=citric.acid,binwidth=0.04)
# 柠檬酸
qplot(data=winedata,x=citric.acid,binwidth=0.02)
# 剩余糖分
qplot(data=winedata,x=residual.sugar,binwidth=0.2)
# 氯化物
qplot(data=winedata,x=chlorides,binwidth=0.02)
# 氯化物
qplot(data=winedata,x=chlorides,binwidth=0.01)
# 单体硫
qplot(data=winedata,x=free.sulfur.dioxide,binwidth=2)
# 单体硫
qplot(data=winedata,x=free.sulfur.dioxide,binwidth=1)
# 单体硫
qplot(data=winedata,x=free.sulfur.dioxide,binwidth=2)
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=5)+
xlim(0,165)
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=5)+
xlim(0,165)
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=5)+
xlim(0,165)+
scale_y_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=5)+
xlim(0,165)+
scale_x_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=1)+
xlim(0,165)+
scale_x_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=0.01)+
xlim(0,165)+
scale_x_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=0.1)+
xlim(0,165)+
scale_x_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=0.05)+
xlim(0,165)+
scale_x_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=0.03)+
xlim(0,165)+
scale_x_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=0.04)+
xlim(0,165)+
scale_x_log10()
# 总硫量
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=0.05)+
xlim(0,165)+
scale_x_log10()
# 密度
qplot(data=winedata,x=density,binwidth=0.0005)
# pH值
qplot(data=winedata,x=pH,binwidth=0.05)
# 硫酸盐
qplot(data=winedata,x=sulphates,binwidth=0.02)
# 硫酸盐
qplot(data=winedata,x=sulphates,binwidth=0.02)+
scale_x_log10()
# 硫酸盐
qplot(data=winedata,x=sulphates,binwidth=0.01)+
scale_x_log10()
# 硫酸盐
qplot(data=winedata,x=sulphates,binwidth=0.03)+
scale_x_log10()
# 硫酸盐
qplot(data=winedata,x=sulphates,binwidth=0.02)+
scale_x_log10()
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.2)
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.2)+
scale_x_log10()
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.01)+
scale_x_log10()
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.02)+
scale_x_log10()
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.01)+
scale_x_log10()
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.2)
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.1)
# 酒精度
qplot(data=winedata,x=alcohol,binwidth=0.2)
# 酸总量
qplot(data=winedata,x=acidity,binwidth=0.5)
birthday=read.csv('birthdaysExample.csv')
print(birthday.head())
View(birthday)
View(birthday)
data("diamonds")
?diamonds
# Your task is to investigate the distribution of your friends'
# birth months and days.
# Here some questions you could answer, and we hope you think of others.
# **********************************************************************
# How many people share your birthday? Do you know them?
# (Reserve time with them or save money to buy them a gift!)
# Which month contains the most number of birthdays?
# How many birthdays are in each month?
# Which day of the year has the most number of birthdays?
# Do you have at least 365 friends that have birthdays on everyday
# of the year?
# **********************************************************************
# You will need to do some data munging and additional research to
# complete this task. This task won't be easy, and you may encounter some
# unexpected challenges along the way. We hope you learn a lot from it though.
# You can expect to spend 30 min or more on this task depending if you
# use the provided data or obtain your personal data. We also encourage you
# to use the lubridate package for working with dates. Read over the documentation
# in RStudio and search for examples online if you need help.
# You'll need to export your Facebooks friends' birthdays to a csv file.
# You may need to create a calendar of your Facebook friends’ birthdays
# in a program like Outlook or Gmail and then export the calendar as a
# csv file.
# Once you load the data into R Studio, you can use the strptime() function
# to extract the birth months and birth days. We recommend looking up the
# documentation for the function and finding examples online.
# We've included some links in the Instructor Notes to help get you started.
# Once you've completed your investigation, create a post in the discussions
# that includes:
#   1. any questions you answered, your observations, and summary statistics
#   2. snippets of code that created the plots
#   3. links to the images of your plots
# You can save images by using the ggsave() command.
# ggsave() will save the last plot created.
# For example...
#                  qplot(x = price, data = diamonds)
#                  ggsave('priceHistogram.png')
# ggsave currently recognises the extensions eps/ps, tex (pictex),
# pdf, jpeg, tiff, png, bmp, svg and wmf (windows only).
# Copy and paste all of the code that you used for
# your investigation below the line. Submit it when you are ready.
# ===============================================================================
birthday=read.csv('birthdaysExample.csv')
str(birthday)
View(birthday)
View(birthday)
# Your task is to investigate the distribution of your friends'
# birth months and days.
# Here some questions you could answer, and we hope you think of others.
# **********************************************************************
# How many people share your birthday? Do you know them?
# (Reserve time with them or save money to buy them a gift!)
# Which month contains the most number of birthdays?
# How many birthdays are in each month?
# Which day of the year has the most number of birthdays?
# Do you have at least 365 friends that have birthdays on everyday
# of the year?
# **********************************************************************
# You will need to do some data munging and additional research to
# complete this task. This task won't be easy, and you may encounter some
# unexpected challenges along the way. We hope you learn a lot from it though.
# You can expect to spend 30 min or more on this task depending if you
# use the provided data or obtain your personal data. We also encourage you
# to use the lubridate package for working with dates. Read over the documentation
# in RStudio and search for examples online if you need help.
# You'll need to export your Facebooks friends' birthdays to a csv file.
# You may need to create a calendar of your Facebook friends’ birthdays
# in a program like Outlook or Gmail and then export the calendar as a
# csv file.
# Once you load the data into R Studio, you can use the strptime() function
# to extract the birth months and birth days. We recommend looking up the
# documentation for the function and finding examples online.
# We've included some links in the Instructor Notes to help get you started.
# Once you've completed your investigation, create a post in the discussions
# that includes:
#   1. any questions you answered, your observations, and summary statistics
#   2. snippets of code that created the plots
#   3. links to the images of your plots
# You can save images by using the ggsave() command.
# ggsave() will save the last plot created.
# For example...
#                  qplot(x = price, data = diamonds)
#                  ggsave('priceHistogram.png')
# ggsave currently recognises the extensions eps/ps, tex (pictex),
# pdf, jpeg, tiff, png, bmp, svg and wmf (windows only).
# Copy and paste all of the code that you used for
# your investigation below the line. Submit it when you are ready.
# ===============================================================================
birthday=read.csv('birthdaysExample.csv')
birthday$birthday=as.Date(birthday$dates)
p_<-GGally::print_if_interactive
wine_plot<-wrap(ggpairs,shape=I('.'),outlier.shape=I('.'))
wine_plot1<-wine_plot(winedata,mapping = NULL)
p_(wine_plot1)
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=fixed.acidity),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('非挥发性酸 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)+
scale_x_log10()
qplot(data=winedata,x=fixed.acidity,binwidth=0.1)+
facet_wrap(~quality)+
scale_x_log10()
qplot(data=winedata,x=fixed.acidity,binwidth=0.01)+
facet_wrap(~quality)+
scale_x_log10()
qplot(data=winedata,x=fixed.acidity,binwidth=0.05)+
facet_wrap(~quality)+
scale_x_log10()
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)
qplot(data=winedata,x=volatile.acidity,binwidth=0.04)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=volatile.acidity),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('挥发性酸 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=citric.acid,binwidth=0.04)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=citric.acid),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('柠檬酸 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=citric.acid,binwidth=0.04)+
facet_wrap(~quality)
qplot(data=winedata,x=citric.acid,binwidth=0.04)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=citric.acid),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('柠檬酸 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=residual.sugar,binwidth=0.2)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=residual.sugar),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('剩余糖 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=chlorides,binwidth=0.02)+
scale_x_log10()+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=chlorides),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('氯化物 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=free.sulfur.dioxide,binwidth=2)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=free.sulfur.dioxide),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
scale_y_sqrt()+
ggtitle('游离二氧化硫 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=total.sulfur.dioxide,binwidth=5)+
xlim(0,165)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=total.sulfur.dioxide),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
scale_y_sqrt()+
ggtitle('二氧化硫总量 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=density,binwidth=0.0005)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=density*density),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('密度 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=pH,binwidth=0.05)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=pH*pH),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('pH vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=sulphates,binwidth=0.02)+
xlim(0.3,1.5)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=sulphates),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('硫酸盐 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
qplot(data=winedata,x=alcohol,binwidth=0.2)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=alcohol),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.5)+
geom_boxplot(alpha=0.5)+
ggtitle('酒精度 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
# density vs. alcohol vs. quality
ggplot(data = subset(winedata,total.sulfur.dioxide<200),
aes(x=alcohol,y=density,color=quality_factor))+
geom_point()+
geom_smooth(method = 'lm')+
ggtitle('density vs. alcohol vs. quality')
# density vs. alcohol vs. quality
ggplot(data = subset(winedata,total.sulfur.dioxide<200),
aes(x=alcohol,y=density,color=quality_factor))+
geom_point()+
scale_color_brewer(palette = 'Blues')+
geom_smooth(method = 'lm')+
ggtitle('density vs. alcohol vs. quality')
# density vs. alcohol vs. quality
ggplot(data = subset(winedata,total.sulfur.dioxide<200),
aes(x=alcohol,y=density,color=quality_factor))+
geom_point()+
scale_color_brewer(palette = 'Blues')+
geom_smooth(method = 'lm',se=FALSE)+
ggtitle('density vs. alcohol vs. quality')
# density vs. alcohol vs. quality
ggplot(data = subset(winedata,total.sulfur.dioxide<200),
aes(x=alcohol,y=density,color=quality_factor))+
geom_point()+
scale_color_brewer(palette = 'Blues')+
geom_smooth(method = 'lm',se=FALSE,size=1)+
ggtitle('density vs. alcohol vs. quality')
# fixed.acidity vs. density^2 vs. quality
ggplot(data=subset(winedata,total.sulfur.dioxide<200),
aes(x=fixed.acidity,y=density*density,color=quality_factor))+
geom_point(alpha = 0.9, size = 2, position = 'jitter')+
geom_smooth(method = 'lm')+
scale_color_brewer(palette = 'red')
ggtitle('fixed.acidity vs. density vs. quality')
# fixed.acidity vs. density^2 vs. quality
ggplot(data=subset(winedata,total.sulfur.dioxide<200),
aes(x=fixed.acidity,y=density*density,color=quality_factor))+
geom_point(alpha = 0.9, size = 2, position = 'jitter')+
geom_smooth(method = 'lm')+
scale_color_brewer(palette = 'Reds')
ggtitle('fixed.acidity vs. density vs. quality')
# fixed.acidity vs. density^2 vs. quality
ggplot(data=subset(winedata,total.sulfur.dioxide<200),
aes(x=fixed.acidity,y=density*density,color=quality_factor))+
geom_point(alpha = 0.9, size = 2, position = 'jitter')+
geom_smooth(method = 'lm')+
scale_color_brewer(palette = 'Yellows')
ggtitle('fixed.acidity vs. density vs. quality')
# fixed.acidity vs. density^2 vs. quality
ggplot(data=subset(winedata,total.sulfur.dioxide<200),
aes(x=fixed.acidity,y=density*density,color=quality_factor))+
geom_point(alpha = 0.9, size = 2, position = 'jitter')+
geom_smooth(method = 'lm')+
scale_color_brewer(palette = 'Greens')
ggtitle('fixed.acidity vs. density vs. quality')
# fixed.acidity vs. density^2 vs. quality
ggplot(data=subset(winedata,total.sulfur.dioxide<200),
aes(x=fixed.acidity,y=density*density,color=quality_factor))+
geom_point(alpha = 0.9, size = 2, position = 'jitter')+
geom_smooth(method = 'lm',se=FALSE,size=1)+
scale_color_brewer(palette = 'Greens')
ggtitle('fixed.acidity vs. density vs. quality')
ggplot(data=subset(winedata,total.sulfur.dioxide<200),
aes(x=fixed.acidity,y=density*density,color=quality_factor))+
geom_point(alpha = 0.9, size = 2, position = 'jitter')+
geom_smooth(method = 'lm')+
ggtitle('fixed.acidity vs. density vs. quality')
# fixed.acidity vs. density^2 vs. quality
ggplot(data=subset(winedata,total.sulfur.dioxide<200),
aes(x=fixed.acidity,y=density*density,color=quality_factor))+
geom_point(alpha = 0.9, size = 2, position = 'jitter')+
geom_smooth(method = 'lm',se=FALSE,size=1)+
scale_color_brewer(palette = 'Greens')
ggtitle('fixed.acidity vs. density vs. quality')
qplot(data=winedata,x=quality)
qplot(data=winedata,x=quality)+
ggtitle('不同品质样本数')
qplot(data=winedata,x=quality)+
ggtitle('不同品质样本分布图')
qplot(data=winedata,x=quality)+
ggtitle('不同品质样本分布图')
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.3)+
xlab('111')
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.3)+
xlab('fixed.acidity(g/dm^3)')
# 不易挥发性酸
qplot(data=winedata,x=fixed.acidity,binwidth=0.3)+
xlab('fixed acidity(g / dm^3)')
# 易挥发性酸
qplot(data=winedata,x=volatile.acidity,binwidth=0.03)+
xlab('volatile acidity(g / dm^3)')
# 柠檬酸
qplot(data=winedata,x=citric.acid,binwidth=0.02)+
xlab('citric acid (g / dm^3)')
qplot(data=winedata,x=fixed.acidity,binwidth=0.4)+
facet_wrap(~quality)
ggplot(aes(x=quality_factor,y=fixed.acidity),data=subset(winedata,total.sulfur.dioxide<200))+
geom_jitter(alpha=0.3)+
geom_boxplot(alpha=0.5)+
ggtitle('非挥发性酸 vs. 品质')+
theme(text=element_text(family="STKaiti",size=14))
